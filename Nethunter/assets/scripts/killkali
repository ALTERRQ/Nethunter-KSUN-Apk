#!/system/bin/sh

# Modified killkali script - updated to match bootkali mounts

SCRIPT_PATH=$(readlink -f $0)
. ${SCRIPT_PATH%/*}/bootkali_log
. ${SCRIPT_PATH%/*}/bootkali_env

#################################
#### DEFINE GLOBAL VARIABLES ####
#################################

## Validate busybox path.
if [ -z "$BUSYBOX" ] || [ ! -x "$BUSYBOX" ]; then
    bklog "[-] Busybox is either not installed or not executable. Please ensure it is symlinked to /system/bin and has execute permissions."
    exit 1
fi

## Validate kali Chroot path.
if [ -z "$MNT" ] || [ ! -d "$MNT" ]; then
    bklog "[-] The \$MNT variable is either undefined or points to a non-existent directory. Please run the NetHunter app first."
    exit 2
fi

isAllunmounted=0

##########################
#### DEFINE FUNCTIONS ####
##########################

########## Kill all running kali services and processes ##########
f_kill_pids() {
    bklog "[!] Killing all running kali services .."
    local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $2}' | uniq)
    if [ -n "$pids" ]; then
        kill -9 $pids 2> /dev/null
        return $?
    fi
    return 0
}

########## Restore the setup ##########
f_restore_setup() {
    bklog "[!] Restoring the setup to previous state.."

    ## set shmmax to 128mb to free memory ##
    #$BUSYBOX sysctl -w kernel.shmmax=134217728

    ## remove all the remaining chroot vnc session pid and log files..##
    bklog "[!] Removing all the remaining chroot vnc session pid and log files.."
    rm -rf "$MNT/tmp/.X11*" "$MNT/tmp/.X*-lock" "$MNT/root/.vnc/*.pid" "$MNT/root/.vnc/*.log" > /dev/null 2>&1
}

########## umount the fs one by one ##########
f_umount_fs() {
    if $BUSYBOX mountpoint -q "$MNT/$1" 2>/dev/null; then
        if $BUSYBOX umount -l "$MNT/$1" || $BUSYBOX umount -f "$MNT/$1"; then
            bklog "[+] umounted $MNT/$1"
            # Don't remove certain critical directories
            case "$1" in
                "dev/pts"|"dev/shm"|"proc"|"sys"|"dev"|"system"|"sdcard")
                    # Keep these directories, just unmount them
                    ;;
                *)
                    if rm -rf "$MNT/$1" 2>/dev/null; then
                        bklog "[+] removed $MNT/$1"
                    else
                        bklog "[-] Failed to remove $MNT/$1"
                        isAllunmounted=1
                    fi
                    ;;
            esac
        else
            bklog "[-] failed to umount $MNT/$1"
            isAllunmounted=1
        fi
    else
        if [ -d "$MNT/$1" ]; then
            bklog "[+] $MNT/$1 is unmounted already."
            # Only remove non-critical directories
            case "$1" in
                "dev/pts"|"dev/shm"|"proc"|"sys"|"dev"|"system"|"sdcard")
                    # Keep these directories
                    ;;
                *)
                    if rm -rf "$MNT/$1" 2>/dev/null; then
                        bklog "[+] removed $MNT/$1"
                    else
                        bklog "[-] Failed to remove $MNT/$1"
                        isAllunmounted=1
                    fi
                    ;;
            esac
        fi
    fi
}

########## umount if chroot directory is NOT a mountpoint(directory method) ##########
f_dir_umount() {
    $BUSYBOX sync
    f_kill_pids
    f_restore_setup
    
    bklog "[!] Removing all fs mounts.."
    
    # Unmount in reverse order of mounting to avoid dependency issues
    # Optional mounts first (may not exist on all systems)
    for optional_mount in "dev/bus/usb" "proc/bus/usb" "sys/kernel/config" "config" "sys/kernel/debug"; do
        if $BUSYBOX mountpoint -q "$MNT/$optional_mount" 2>/dev/null; then
            f_umount_fs "$optional_mount"
        fi
    done

    
    # Main filesystem unmounts in reverse dependency order
    FS=(
        "system" 
        "dev/shm"
        "run"
        "tmp"
        "dev/pts"
        "dev"
        "sys"
        "proc"
        "sdcard"
    )
    
    for i in "${FS[@]}"; do
        f_umount_fs "$i"
    done
}

########## Check if chroot directory is a mountpoint ##########
f_is_mntpoint() {
    if [ -d "$MNT" ]; then
        $BUSYBOX mountpoint -q "$MNT" && return 0
        return 1
    fi
}

###################
#### MAIN PART ####
###################

f_is_mntpoint
res=$?
case $res in
1)
    bklog "[!] $MNT is NOT a mountpoint"
    f_dir_umount
    ;;
*)
    bklog "[!] $MNT directory is not existed!!! Aborting.."
    exit 1
esac

if [ -z "$(grep "$MNT" /proc/mounts)" ]; then
    bklog "[+] All done."
    isAllunmounted=0
else
    bklog "[-] there are still mounted points not unmounted yet."
    bklog "[-] Try run this script again and see if they can be unmounted now."
    isAllunmounted=1
fi

exit $isAllunmounted
